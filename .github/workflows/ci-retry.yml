name: CI Retry Failed Jobs

on:
  schedule:
    - cron: "0 */2 * * *" # every 2 hours
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read
  actions: write

concurrency:
  group: ci-retry
  cancel-in-progress: false

jobs:
  retry-failed:
    name: Re-run failed jobs for labeled PRs
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Re-run failed jobs
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # Get PRs with ci-retry label and process them
          prs_json="$(gh pr list --repo "$REPO" --label ci-retry --state open --json number,headRefName,headRefOid)" || {
            echo "Failed to fetch PRs with ci-retry label" >&2; exit 1
          }

          if [[ "$(jq length <<< "$prs_json")" -eq 0 ]]; then
            echo "No open PRs with label ci-retry."; exit 0
          fi

          # Process each PR
          jq -r '.[] | "\(.number) \(.headRefName) \(.headRefOid)"' <<< "$prs_json" | while IFS=' ' read -r pr_number head_ref head_sha; do
            echo "Processing PR #$pr_number (ref: $head_ref sha: $head_sha)"

            # Get failed runs for this specific commit with a single API call and combined filtering
            failed_run_ids="$(gh run list --repo "$REPO" --branch "$head_ref" --limit 20 \
              --json databaseId,headSha,status,conclusion \
              --jq --arg sha "$head_sha" \
              ".[] | select(.headSha == \$sha and .status == \"completed\" and (.conclusion == \"failure\" or .conclusion == \"cancelled\" or .conclusion == \"timed_out\")) | .databaseId")" || {
              echo "  Failed to fetch runs for PR #$pr_number" >&2; continue
            }

            if [[ -z "$failed_run_ids" ]]; then
              echo "  No failed/cancelled runs to retry for PR #$pr_number."
              continue
            fi

            # Retry each failed run
            while IFS= read -r run_id; do
              [[ -z "$run_id" ]] && continue
              echo "  Re-running failed jobs for run $run_id"
              if gh run rerun --repo "$REPO" "$run_id" --failed >/dev/null 2>&1; then
                echo "    Rerun requested."
              else
                echo "    Failed to request rerun for $run_id" >&2
              fi
            done <<< "$failed_run_ids"
          done

          echo "Done."
